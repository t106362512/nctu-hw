#!/bin/sh
#
# $FreeBSD: releng/11.0/etc/autofs/include_ldap 280321 2015-03-21 09:42:37Z trasz $
#

# Modify this to suit your needs.  The "$1" is the map name, eg. "auto_master".
# To debug, simply run this script with map name as the only parameter.  It's
# supposed to output map contents ("key location" pairs) to standard output.
SEARCHBASE="{{ ldap_autofs_mapname_attr }}=$1,{{ldap_autofs_ou}}{{ ldap_base }}"
ENTRY_ATTRIBUTE="{{ ldap_autofs_entry_attr }}"
VALUE_ATTRIBUTE="{{ ldap_autofs_value_attr }}"

/usr/local/bin/ldapsearch -LLL -x -D {{ ldap_binddn }} -w"{{ ldap_bindpw }}" -o ldif-wrap=no -b "$SEARCHBASE" "$ENTRY_ATTRIBUTE" "$VALUE_ATTRIBUTE" | awk '
$1 == "'$ENTRY_ATTRIBUTE':" {
	key = $2
}

$1 == "'$VALUE_ATTRIBUTE':" {
	for (i = 2; i <= NF; i++) {
		value[i] = $(i)
	}
	nvalues = NF
	b64 = 0
}

# Double colon after attribute name means the value is in Base64.
$1 == "'$VALUE_ATTRIBUTE'::" {
	for (i = 2; i <= NF; i++) {
		value[i] = $(i)
	}
	nvalues = NF
	b64 = 1
}

# Empty line - end of record.
NF == 0 && key != "" && nvalues > 0 {
	printf "%s%s", key, OFS
	for (i = 2; i < nvalues; i++) {
		printf "%s%s", value[i], OFS
	}
	if (b64 == 1) {
		printf "%s", value[nvalues] | "b64decode -rp"
		close("b64decode -rp")
		printf "%s", ORS
	} else {
		printf "%s%s", value[nvalues], ORS
	}
}

NF == 0 {
	key = ""
	nvalues = 0
	delete value
}
'{% if ldap_autofs_transform %} | {{ ldap_autofs_transform }}{% endif %}{% if ldap_autofs_egrep_filter %} | egrep '^({{ ldap_autofs_egrep_filter | join('|') }}) '{% endif %}
